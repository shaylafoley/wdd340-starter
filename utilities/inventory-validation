const utilities = require(".")
  const { body, validationResult } = require("express-validator")
  const validate = {}
  
  /*  **********************************
  *  Inventory Data Validation Rules
  * ********************************* */
  validate.inventoryRules = () => {
    return [
      // inv-make is required and must be string
      body("inv_make")
        .trim()
        .escape()
        .notEmpty()
        .isLength({ min: 1 })
        .withMessage("Please provide a inventory make."), // on error this message is sent.
  
      // inv-model is required and must be string
      body("inv-model")
        .trim()
        .escape()
        .notEmpty()
        .isLength({ min: 2 })
        .withMessage("Please provide an inventory model."), // on error this message is sent.
  
      // inv_description is required and cannot already exist in the DB
      body("inv_description")
      .trim()
      .escape()
      .notEmpty()
      .isLength({ min: 2 }) // refer to validator.js docs
      .withMessage("Please provide an inventory description."),
  
      // inv_price is required and must be strong password
      body("inv_price")
      .trim()
      .escape()
      .notEmpty()
      .isLength({ min: 1 }) // refer to validator.js docs
      .withMessage("Please provide an inventory price."),

      body("inv_year")
      .trim()
      .escape()
      .notEmpty()
      .isLength({ min: 1 }) // refer to validator.js docs
      .withMessage("Please provide an inventory year."),

      body("inv_miles")
      .trim()
      .escape()
      .notEmpty()
      .isLength({ min: 1 }) // refer to validator.js docs
      .withMessage("Please provide an inventory miles."),

      body("inv_color")
      .trim()
      .escape()
      .notEmpty()
      .isLength({ min: 1 }) // refer to validator.js docs
      .withMessage("Please provide an inventory color."),
    ]
  }

   /* ******************************
 * Check data and return errors or continue to inventory
 * ***************************** */
validate.checkRegData = async (req, res, next) => {
    const { inv_make, inv_model, inv_description, inv_price, inv_year, inv_miles, inv_color } = req.body
    let errors = []
    errors = validationResult(req)
    if (!errors.isEmpty()) {
      let nav = await utilities.getNav()
      res.render("inventory/add-inventory", {
        errors,
        title: "Add Inventory",
        nav,
        inv_make, 
        inv_model, 
        inv_description, 
        inv_price, 
        inv_year, 
        inv_miles, 
        inv_color
      })
      return
    }
    next()
  }
  
  module.exports = validate